{"version":3,"sources":["ListFunctions.js","List.js","App.js","serviceWorker.js","index.js"],"names":["getList","axios","get","headers","Content-Type","then","res","data","addTaskToList","term","post","title","isDone","deleteTaskFromList","delete","concat","catch","error","console","log","updateItem","id","done","patch","List","state","items","getAll","_this","setState","Object","toConsumableArray","onChange","event","target","value","onSubmit","preventDefault","onDelete","val","forEach","item","index","splice","onUpdate","this","react_default","a","createElement","bind","List_TaskInput","List_TaskList","Component","TaskInput","_ref","className","type","placeholder","aria-label","aria-describedby","autoComplete","onClick","TaskList","_ref2","map","key","style","textDecoration","","App","src_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12340447.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const getList = () => {\r\n\t return axios\r\n\t\t .get(\"http://172.23.141.97:5000/api/tasks\", {\r\n\t\t\t\theaders: {\"Content-Type\": \"application/json\"}\r\n\t\t })\r\n\t\t .then(res => res.data)\r\n};\r\n\r\nexport const addTaskToList = term => {\r\n\t return axios\r\n\t\t .post(\r\n\t\t\t \"http://172.23.141.97:5000/api/task\",\r\n\t\t\t {\r\n\t\t\t\t\ttitle: term,\r\n\t\t\t\t\tisDone: false\r\n\t\t\t },\r\n\t\t\t {\r\n\t\t\t\t\theaders: {\"Content-Type\": \"application/json\"}\r\n\t\t\t }\r\n\t\t )\r\n};\r\n\r\nexport const deleteTaskFromList = term => {\r\n\t axios\r\n\t\t .delete(`http://172.23.141.97:5000/api/task/${term}`, {\r\n\t\t\t\theaders: {\"Content-Type\": \"application/json\"}\r\n\t\t })\r\n\t\t .catch(error => console.log(error))\r\n};\r\n\r\nexport const updateItem = (title, id, done) => {\r\n\t return axios\r\n\t\t .patch(\r\n\t\t\t `http://172.23.141.97:5000/api/task/${id}`,\r\n\t\t\t {\r\n\t\t\t\t\ttitle: title,\r\n\t\t\t\t\tisDone: done\r\n\t\t\t },\r\n\t\t\t {\r\n\t\t\t\t\theaders: {\"Content-Type\": \"application/json\"}\r\n\t\t\t }\r\n\t\t )\r\n};\r\n","import React, {Component} from \"react\";\r\nimport {getList, addTaskToList, deleteTaskFromList, updateItem} from \"./ListFunctions\";\r\n\r\nclass List extends Component {\r\n\t state = {\r\n\t\t\tid: \"\",\r\n\t\t\tterm: \"\",\r\n\t\t\titems: []\r\n\t };\r\n\r\n\t componentDidMount() {\r\n\t\t\tthis.getAll();\r\n\t }\r\n\r\n\t getAll = () => {\r\n\t\t\tgetList().then(data => {\r\n\t\t\t\t this.setState({\r\n\t\t\t\t\t\t\tterm: \"\",\r\n\t\t\t\t\t\t\titems: [...data]\r\n\t\t\t\t\t }\r\n\t\t\t\t );\r\n\t\t\t});\r\n\t };\r\n\r\n\t onChange = event => {\r\n\t\t\tthis.setState({term: event.target.value,});\r\n\t };\r\n\r\n\t onSubmit = event => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\taddTaskToList(this.state.term).then(() => {\r\n\t\t\t\t this.getAll();\r\n\t\t\t});\r\n\t };\r\n\r\n\t onDelete = (val) => {\r\n\t\t\tdeleteTaskFromList(val);\r\n\r\n\t\t\tlet data = [...this.state.items];\r\n\t\t\tdata.forEach((item, index) => {\r\n\t\t\t\t if (item[1] === val) {\r\n\t\t\t\t\t\tdata.splice(index, 1);\r\n\t\t\t\t }\r\n\t\t\t});\r\n\t\t\tthis.setState({items: [...data]});\r\n\t };\r\n\r\n\t onUpdate = (title, id, done) => {\r\n\t\t\tupdateItem(title, id, !done).then(() => {\r\n\t\t\t\t this.getAll();\r\n\t\t\t});\r\n\t };\r\n\r\n\t render() {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t <form onSubmit={this.onSubmit.bind(this)}>\r\n\t\t\t\t\t\t\t<TaskInput value={this.state.term || \"\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t onChange={this.onChange.bind(this)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t onSubmit={this.onSubmit.bind(this)}/>\r\n\r\n\t\t\t\t\t\t\t<TaskList items={this.state.items}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonDelete={this.onDelete.bind(this)}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonUpdate={this.onUpdate.bind(this)}/>\r\n\t\t\t\t\t </form>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t }\r\n}\r\n\r\nexport const TaskInput = ({value, onChange, onSubmit}) => {\r\n\t return (\r\n\t\t <div className=\"input-group mb-5 d-flex justify-content-center\">\r\n\t\t\t\t<div className=\"input-group-prepend\">\r\n\t\t\t\t\t <input\r\n\t\t\t\t\t\t type=\"text\"\r\n\t\t\t\t\t\t className=\"form-control is-valid\"\r\n\t\t\t\t\t\t id=\"exampleInputEmail1\"\r\n\t\t\t\t\t\t value={value}\r\n\t\t\t\t\t\t onChange={onChange}\r\n\t\t\t\t\t\t placeholder=\"Enter the task...\"\r\n\t\t\t\t\t\t aria-label=\"ToDo task\"\r\n\t\t\t\t\t\t aria-describedby=\"button-addon2\"\r\n\t\t\t\t\t\t autoComplete='off'\r\n\t\t\t\t\t />\r\n\t\t\t\t\t <div className=\"input-group-append\">\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline-info ml-3\"\r\n\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\tid=\"button-addon2\"\r\n\t\t\t\t\t\t\t\tonClick={onSubmit}\r\n\t\t\t\t\t\t\t>Add_Task\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t </div>\r\n\r\n\t\t\t\t</div>\r\n\t\t </div>\r\n\t );\r\n};\r\n\r\nexport const TaskList = ({items, onDelete, onUpdate}) => {\r\n\t return (\r\n\t\t <table className=\"table\">\r\n\t\t\t\t<tbody>\r\n\t\t\t\t{items.map((item, index) => (\r\n\t\t\t\t\t<tr key={index}>\r\n\t\t\t\t\t\t <td>\r\n\t\t\t\t\t\t\t\t<button type='check-box'\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline-secondary btn-sm\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => onUpdate(item[0], item[1], item[2])}\r\n\t\t\t\t\t\t\t\t>Done\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t </td>\r\n\t\t\t\t\t\t <td className=\"text-left\"\r\n\t\t\t\t\t\t\t\t style={item[2] ? {textDecoration: 'line-through'} : {'': ''}}>\r\n\r\n\t\t\t\t\t\t\t\t{item[0]}\r\n\t\t\t\t\t\t </td>\r\n\t\t\t\t\t\t <td className=\"text-right \">\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-danger\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => onDelete(item[1])}\r\n\t\t\t\t\t\t\t\t>Delete\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t </td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t))}\r\n\t\t\t\t</tbody>\r\n\t\t </table>\r\n\t )\r\n};\r\n\r\nexport default List;\r\n","import React, {Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport List from './List'\r\n\r\nclass App extends Component {\r\n   render() {\r\n      return (\r\n        <div className='container'>\r\n           <div className=\"row\">\r\n              <div className=\"col-md-6 mx-auto\">\r\n                 <h1 className=\"text-center\">ToDoList</h1>\r\n                 <List/>\r\n              </div>\r\n           </div>\r\n        </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}