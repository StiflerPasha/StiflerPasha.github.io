{"version":3,"sources":["ListFunctions.js","List.js","App.js","serviceWorker.js","index.js"],"names":["getList","axios","get","headers","Content-Type","then","console","log","res","data","addTaskToList","term","post","title","isDone","deleteTaskFromList","delete","concat","catch","error","List","state","id","items","onChange","event","_this","setState","target","value","getAll","Object","toConsumableArray","onSubmit","preventDefault","onDelete","val","forEach","item","index","splice","this","_this2","react_default","a","createElement","List_TaskInput","bind","List_TaskList","onClick","Component","TaskInput","_ref","className","type","placeholder","required","TaskList","_ref2","map","key","App","src_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a87d963.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const getList = () => {\r\n\t return axios\r\n\t\t .get(\"http://localhost:5000/api/tasks\", {\r\n\t\t\t\theaders: {\"Content-Type\": \"application/json\"}\r\n\t\t })\r\n\t\t .then(console.log('Get List'))\r\n\t\t .then(res => res.data)\r\n};\r\n\r\nexport const addTaskToList = term => {\r\n\t return axios\r\n\t\t .post(\r\n\t\t\t \"http://localhost:5000/api/task\",\r\n\t\t\t {\r\n\t\t\t\t\ttitle: term,\r\n\t\t\t\t\tisDone: false\r\n\t\t\t },\r\n\t\t\t {\r\n\t\t\t\t\theaders: {\"Content-Type\": \"application/json\"}\r\n\t\t\t }\r\n\t\t )\r\n\t\t .then(console.log('Add item'))\r\n};\r\n\r\nexport const deleteTaskFromList = term => {\r\n\t axios\r\n\t\t .delete(`http://localhost:5000/api/task/${term}`, {\r\n\t\t\t\theaders: {\"Content-Type\": \"application/json\"}\r\n\t\t })\r\n\t\t .then(console.log('Delete item'))\r\n\t\t .catch(error => console.log(error))\r\n};\r\n","import React, {Component} from \"react\";\r\nimport {getList, addTaskToList, deleteTaskFromList} from \"./ListFunctions\";\r\n\r\nclass List extends Component {\r\n\t state = {\r\n\t\t\tid: \"\",\r\n\t\t\tterm: \"\",\r\n\t\t\titems: []\r\n\t };\r\n\r\n\t componentDidMount() {\r\n\t\t\tthis.getAll();\r\n\t }\r\n\r\n\t onChange = event => {\r\n\t\t\tthis.setState({term: event.target.value,});\r\n\t };\r\n\r\n\t getAll = () => {\r\n\t\t\tgetList().then(data => {\r\n\t\t\t\t this.setState({\r\n\t\t\t\t\t\t\tterm: \"\",\r\n\t\t\t\t\t\t\titems: [...data]\r\n\t\t\t\t\t }\r\n\t\t\t\t );\r\n\t\t\t});\r\n\t };\r\n\r\n\t onSubmit = event => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\taddTaskToList(this.state.term).then(() => {\r\n\t\t\t\t this.getAll();\r\n\t\t\t});\r\n\t };\r\n\r\n\t onDelete = (val) => {\r\n\t\t\tdeleteTaskFromList(val);\r\n\r\n\t\t\tlet data = [...this.state.items];\r\n\t\t\tdata.forEach((item, index) => {\r\n\t\t\t\t if (item[1] === val) {\r\n\t\t\t\t\t\tdata.splice(index, 1);\r\n\t\t\t\t }\r\n\t\t\t});\r\n\t\t\tthis.setState({items: [...data]});\r\n\t };\r\n\r\n\t render() {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t <form onSubmit={this.onSubmit}>\r\n\t\t\t\t\t\t\t<TaskInput value={this.state.term || \"\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t onChange={this.onChange.bind(this)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t onSubmit={() => this.onSubmit}/>\r\n\r\n\t\t\t\t\t\t\t<TaskList items={this.state.items}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={this.onDelete}/>\r\n\t\t\t\t\t </form>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t }\r\n}\r\n\r\nexport const TaskInput = ({value, onChange, onSubmit}) => {\r\n\t return (\r\n\t\t <div className=\"input-group\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t <div className=\"col-md-8 col-12 mb-2\">\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\t\t\tid=\"exampleInputEmail1\"\r\n\t\t\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter the task...\"\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t </div>\r\n\t\t\t\t\t <button\r\n\t\t\t\t\t\t type=\"submit\"\r\n\t\t\t\t\t\t onClick={onSubmit}\r\n\t\t\t\t\t\t className=\"btn btn-success col-md-3 mx-sm-5\"\r\n\t\t\t\t\t >Submit\r\n\t\t\t\t\t </button>\r\n\t\t\t\t</div>\r\n\t\t </div>\r\n\t )\r\n};\r\n\r\nexport const TaskList = ({items, onClick}) => {\r\n\t return (\r\n\t\t <table className=\"table col-md-12\">\r\n\t\t\t\t<tbody>\r\n\t\t\t\t{items.map((item, index) => (\r\n\t\t\t\t\t<tr key={index}>\r\n\t\t\t\t\t\t <td className=\"text-left\">{item[0]}</td>\r\n\t\t\t\t\t\t <td className=\"text-right\">\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-danger\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t onClick(item[1])\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t Delete\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t </td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t))}\r\n\t\t\t\t</tbody>\r\n\t\t </table>\r\n\t )\r\n};\r\n\r\nexport default List;\r\n","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport List from './List'\n\nclass App extends Component {\n   render() {\n      return (\n        <div className='container'>\n           <div className=\"row\">\n              <div className=\"col-md-6 mx-auto\">\n                 <h1 className=\"text-center\">ToDoList</h1>\n                 <List/>\n              </div>\n           </div>\n        </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}